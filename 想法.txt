就是說阿，
一開始起點先往四個方向發散，遇到牆壁之後停下來
start point (x0, y0)
	goNorth (x0, y = y_max(until hit obstacle))
	goSouth (x0, y = y_min(until hit obstacle))
	goWest (x = x_min(until hit obstacle), y0)
	goEast (x = x_max(until hit obstacle), y0)
(然後終點做一樣的事情？
end point (xn, yn)
	goNorth (xn, y = y_max(until hit obstacle))
	goSouth (xn, y = y_min(until hit obstacle))
	goWest (x = x_min(until hit obstacle), yn)
	goEast (x = x_max(until hit obstacle), yn)
)
然後看要不要更新搜尋與終點最近的組合，
也就是說，我們現在有 start' * 4, end' * 4，這樣組合會有16個，
然後挑最近的更新為新的 start point 跟 end point，反覆做。
最後(要try 幾次？)如果沒找到的話，要return沒找到，並往回找。

所以現在我們要研究的是那個 obstacle 的問題。
應該要有一個整個 chip 的牆壁的分布圖，然後判斷
剛剛有問 chatGPT 他好像有給幾個寫法。

Routing 的想法：
好啊 納今天我們假設我們有一個前進方向
然後我們就往這個方向前行，每次走d_distance
並且往這個方向［的兩邊］發出射線，檢查碰到牆壁的位置
一旦發現碰到牆壁的具有增大，代表說這裡可能會是一個出口
所以我們就記錄這個位置，然後持續檢查，直到又有一個變化
那我們就把這之間的點都做一個recurrsion，也就是再 routing 一次
(那終點也要做？)

新的Band search algorithm的發想:
一開始只有起點和終點，以及一堆牆壁
第一個level的band會是只有線，沒有寬度
source(x1, y1)會產生
Band_X(){
	containTerminal = 1;
	zoneName = sourceZoneName;
	direction_isX = 1;
	parent = nullptr;
	minEdge = maxEdge = y1;
	minEnd = maxEnd = x1;
	然後這個band會做direction的detectWall{
		for w : allWalls {
			do {
				maxEnd += dx;
				minEnd += dx;
				if(hitWall) break;
			}
		}
	}
}
Band_Y 做同樣的事情
一樣會有OSB、OTB、CSB、CTB
step1: initialization
step2: search if intersect
step3: store current into old
step4: use current to extend new bands (ESB、ETB)
	   and exchange the extended and current
step5: find the path
